let SCORE;_54b‍.x([["getSCOREScore",()=>getSCOREScore],["setSCOREScore",()=>setSCOREScore]]);_54b‍.w("../public/javascripts/defined",[["SCORE",["SCORE"],function(v){SCORE=v}]]);

var IndexTable = require("../models/IndexTable");
var global = require("../global");

       const getSCOREScore = () => {
  console.log("getSCOREScore 호출됨.");

  IndexTable.getIndexTableBySensorType(SCORE, function(err, sensorIndexInfo) {
    if (err) {
      _54b‍.g.console.error(
        "getIndexTableBySensorType 처리 중 오류 발생 :" + err.stack
      );
      return;
    }

    //결과 객체 있으면 성공 응답 전송
    if (sensorIndexInfo) {
      global.sensorTable.score = sensorIndexInfo;
    } else {
      console.error("SCORE : sensorIndexInfo 정보없음");
    }
  });
};

       const setSCOREScore = (grade, min, max) => {
  _54b‍.g.console.log("setScore 호출됨 : " + grade + "," + min + "," + max);
  AlarmTable.updateAlarmValue(SCORE, grade, min, max, function(
    err,
    sensorIndexInfo
  ) {
    if (err) {
      _54b‍.g.console.error("updateIndexTable 처리 중 오류 발생 :" + err.stack);
      return;
    }

    if (sensorIndexInfo) {
      global.sensorTable.score[grade - 1].min = min;
      global.sensorTable.score[grade - 1].max = max;
    } else {
      console.error("SCORE : sensorIndexInfo 정보없음");
    }
  });
};
