//usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("deviceserver:server");
var http = require("http");
// socket.io 모듈 블러들이기
// var socketio = require("socket.io");

// cors 사용 - 클라이언트에서 ajax로 요청하면 CORS 지원
// var cors = require("cors");

// var readline = require("readline");
// var fs = require("fs");
// var request = require("request");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8116");
app.set("port", port);

// cors를 미들웨어로 사용하도록 등록
// app.use(cors());

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// var io = socketio.listen(server);
// console.log("socket.io 요청을 받아들일 준비가 되었습니다.");

// io.sockets.on("connection", onConnection);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
  //throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

// // 펌웨어 파일 내용을 담을 배열
// var HEXfileData = [];

// // 펌웨어 파일 경로
// var firmwareFilePath = "http://smart.aircok.com:13701/uploads/";

// // 펌웨어 파일 이름
// var firmwareFileName = "eco_data.txt";

// // 펌웨어 파일을 라인별로 읽기 처리
// var rl = readline.createInterface({
//   input: request(firmwareFilePath + firmwareFileName), // 펌웨어 파일
//   crlfDelay: Infinity
// });

// // 펌웨어 파일을 라인별로 배열에 넣음
// rl.on("line", function(line) {
//   HEXfileData.push(line);
// });

/**
 * Event listener for socket server "Connection" event.
 */

// function onConnection(socket) {
//   console.dir("Connection info : ", socket.request.connetion._peername);

//   //소켓 객체에 클라이언트 Host, Port 정보 속성으로 추가
//   socket.remoteAddress = socket.request.connection._peername.address;
//   socket.remotePort = socket.request.connection._peername.port;

//   console.log("Client connected", new Date().toString());

//   // 클라이언트로부터 데이터 수신
//   socket.on("data", function(data) {
//     console.log("Client sent " + data.toString(), new Date().toString());

//     // 클라이언트에서 4자리 숫자를 보내면 해당 숫자의 번호에 해당하는 HEX File 전송
//     if (data.toString().length === 4) {
//       var index = parseInt(data.toString(), 10);
//       if (HEXfileData[index]) {
//         client.write(HEXfileData[index]);
//         console.log(
//           "Client write " + HEXfileData[index].toString(),
//           new Date().toString()
//         );
//       }
//     }
//   });

//   // 클라이언트 접속 종료
//   socket.on("end", function() {
//     console.log("Client disconnected", new Date().toString());
//   });
// }
